//------------------------------------------------------
// THIS FILE IS AUTOGENERATED
// DO NOT APPLY MANUAL MODIFICATIONS IN THIS FILE!
//------------------------------------------------------

const sqlite3 = require("sqlite3").verbose();
const uuid = require('uuid');
const filepath = "./db/main.sqlite";

async function getByGuid(params, callback) {
    const db = new sqlite3.Database(filepath, (error) => {
        if (error) {return console.log(error.message);}
        db.serialize(() => {
            let result = {};
            console.log("departmentsProvider->getByGuid Started with params: " + JSON.stringify(params));
            db.each(`SELECT * FROM departments WHERE guid=? AND id IS NOT NULL AND isDeleted=0`, [params.guid,], (error, row) => {
                if (error) {return console.log(error);}
                let recordToReturn = 
				{
					guid: row.guid,
					name: row.name,
				}                
                result = recordToReturn;
            },
            function() {
                console.log("departmentsProvider->getByGuid Finished (callback)");
                console.log("departmentsProvider->getByGuid this is the result: " + JSON.stringify(result));
                callback(null, result);
            });
        });
    });
}

async function listForGrid(params, callback) {
    const db = new sqlite3.Database(filepath, (error) => {
        if (error) {return console.log(error.message);}
        db.serialize(() => {
            let result = [];
            console.log("departmentsProvider->listForGrid Started with params: " + JSON.stringify(params));
            db.each(`SELECT * FROM departments WHERE isDeleted=0`, [], (error, row) => {
                if (error) {return console.log(error);}
                let recordToReturn = 
				{
					guid: row.guid,
					name: row.name,
				}                
                result.push(recordToReturn);
            },
            function() {
                console.log("departmentsProvider->listForGrid Finished (callback)");
                console.log("departmentsProvider->listForGrid this is the result: " + JSON.stringify(result));
                callback(null, result);
            });
        });
    });
}

async function listForDropdown(params, callback) {
    const db = new sqlite3.Database(filepath, (error) => {
        if (error) {return console.log(error.message);}
        db.serialize(() => {
            let result = [];
            console.log("departmentsProvider->listForDropdown Started with params: " + JSON.stringify(params));
            db.each(`SELECT * FROM departments `, [], (error, row) => {
                if (error) {return console.log(error);}
                let recordToReturn = 
				{
					guid: row.guid,
					name: row.name,
				}                
                result.push(recordToReturn);
            },
            function() {
                console.log("departmentsProvider->listForDropdown Finished (callback)");
                console.log("departmentsProvider->listForDropdown this is the result: " + JSON.stringify(result));
                callback(null, result);
            });
        });
    });
}

async function save(guid, callback) {
    const db = new sqlite3.Database(filepath, (error) => {
        if (error) {return console.log(error.message);}
        db.serialize(() => {
            let result = {};
            console.log("departmentsProvider->save Started");
            db.each(`SELECT * FROM departments WHERE guid = ?`, [guid], (error, row) => {
                if (error) {return console.log(error);}
                let recordToReturn = 
				{
				}                
                result = recordToReturn;
            },
            function() {
                console.log("departmentsProvider->save Finished (callback)");
                callback(null, result);
            });
        });
    });
}

async function deleteLogic(guid, callback) {
    const db = new sqlite3.Database(filepath, (error) => {
        if (error) {return console.log(error.message);}
        db.serialize(() => {
            let result = {};
            console.log("departmentsProvider->deleteLogic Started");
            db.each(`SELECT * FROM departments WHERE guid = ?`, [guid], (error, row) => {
                if (error) {return console.log(error);}
                let recordToReturn = 
				{
				}                
                result = recordToReturn;
            },
            function() {
                console.log("departmentsProvider->deleteLogic Finished (callback)");
                callback(null, result);
            });
        });
    });
}



module.exports = { getByGuid,listForGrid,listForDropdown,save,deleteLogic, }